% dimensions = ['2', '3', '4']
% dimension_to_columns = {
%   '2': ['0', '1'],
%   '3': ['0', '1', '2'],
%   '4': ['0', '1', '2', '3'],
% }
% dimension_to_rows = {
%   '2': ['x', 'y'],
%   '3': ['x', 'y', 'z'],
%   '4': ['x', 'y', 'z', 'w'],
% }
% scalar_types = ['Float', 'Double']
% scalar_type_to_symbol = {'Float': 'f', 'Double': ''}
% scalar_type_to_simd_type_prefix = {'Float': 'matrix_float', 'Double': 'matrix_double'}
% scalar_type_to_simd_identity_prefix = {'Float': 'matrix_identity_float', 'Double': 'matrix_identity_double'}
% scalar_type_to_simd_vector_prefix = {'Float': 'vector_float', 'Double': 'vector_double'}
%
import SwiftyVector

#if canImport(simd)
import simd
%
% for num_rows in dimensions:
%   for num_cols in dimensions:
%     if num_rows == num_cols:
%       matrix_type = 'SquareMatrix'
%     else:
%       matrix_type = 'Matrix'
%     end
%     for scalar_type in scalar_types:
%       symbol = scalar_type_to_symbol[scalar_type]
%       simd_type_prefix = scalar_type_to_simd_type_prefix[scalar_type]
%       simd_identity_prefix = scalar_type_to_simd_identity_prefix[scalar_type]
%       simd_vector_type_prefix = scalar_type_to_simd_vector_prefix[scalar_type]

public struct Matrix${num_rows}x${num_cols}${symbol} {
    fileprivate var matrix: ${simd_type_prefix}${num_cols}x${num_rows}

    public init(_ matrix: ${simd_type_prefix}${num_cols}x${num_rows}) {
        self.matrix = matrix
    }
}

extension ${simd_type_prefix}${num_cols}x${num_rows} {
    init(_ matrix: Matrix${num_rows}x${num_cols}${symbol}) {
        self = matrix.matrix
    }
}

extension Matrix${num_rows}x${num_cols}${symbol} : ${matrix_type} {
    public typealias Scalar = ${scalar_type}
    public typealias RowVector = Vector${num_rows}${symbol}
    public typealias ColumnVector = Vector${num_cols}${symbol}
    public typealias Transpose = Matrix${num_cols}x${num_rows}${symbol}

    public var rowCount: Int {
        return ${num_rows}
    }

    public var columnCount: Int {
        return ${num_cols}
    }
    
    public var transpose: Matrix${num_cols}x${num_rows}${symbol} {
        return Matrix${num_cols}x${num_rows}${symbol}(matrix.transpose)
    }

    public static var zero: Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(${simd_type_prefix}${num_cols}x${num_rows}())
    }

    public static func +(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: Matrix${num_rows}x${num_cols}${symbol}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(lhs.matrix + rhs.matrix)
    }

    public static func -(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: Matrix${num_rows}x${num_cols}${symbol}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(lhs.matrix - rhs.matrix)
    }

    public static func *(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: ${scalar_type}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(lhs.matrix * rhs)
    }

    public static func *(lhs: ${scalar_type}, rhs: Matrix${num_rows}x${num_cols}${symbol}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(lhs * rhs.matrix)
    }

    public static func *(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: Vector${num_cols}${symbol}) -> Vector${num_rows}${symbol} {
        return Vector${num_rows}${symbol}(lhs.matrix * ${simd_vector_type_prefix}${num_cols}(rhs))
    }

    public static func *(lhs: Vector${num_rows}${symbol}, rhs: Matrix${num_rows}x${num_cols}${symbol}) -> Vector${num_cols}${symbol} {
        return Vector${num_cols}${symbol}(${simd_vector_type_prefix}${num_rows}(lhs) * rhs.matrix)
    }

    public static func /(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: ${scalar_type}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return lhs * (1.0 / rhs)
    }

    public static prefix func +(value: Matrix${num_rows}x${num_cols}${symbol}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return value
    }

    public static prefix func -(value: Matrix${num_rows}x${num_cols}${symbol}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return value * -1
    }
%       if matrix_type == 'SquareMatrix':

    public static func *(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: Matrix${num_rows}x${num_cols}${symbol}) -> Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(lhs.matrix * rhs.matrix)
    }

    public var inverse: Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(matrix.inverse)
    }

    public static var identity: Matrix${num_rows}x${num_cols}${symbol} {
        return Matrix${num_rows}x${num_cols}${symbol}(${simd_identity_prefix}${num_rows}x${num_cols})
    }
%       end

    public var description: String {
        return """
        [
%       for row in dimension_to_rows[num_rows]:
            [${', '.join([f'\(matrix.columns.{column}.{row}.description)' for column in dimension_to_columns[num_cols]])}],
%       end
        ]
        """
    }

    public var debugDescription: String {
        return """
        [
%       for row in dimension_to_rows[num_rows]:
            [${', '.join([f'\(matrix.columns.{column}.{row}.debugDescription)' for column in dimension_to_columns[num_cols]])}],
%       end
        ]
        """
    }
}

extension Matrix${num_rows}x${num_cols}${symbol} { // Equatable
    public static func ==(lhs: Matrix${num_rows}x${num_cols}${symbol}, rhs: Matrix${num_rows}x${num_cols}${symbol}) -> Bool {
        return lhs.matrix == rhs.matrix
    }
}

extension Matrix${num_rows}x${num_cols}${symbol} : Encodable {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.unkeyedContainer()
%       for i, row in enumerate(dimension_to_rows[num_rows]):
        try container.encode([${', '.join([f'matrix.columns.{column}.{row}' for column in dimension_to_columns[num_cols]])}])
%       end
    }
}

extension Matrix${num_rows}x${num_cols}${symbol} : Decodable {
    public init(from decoder: Decoder) throws {
        var container = try decoder.unkeyedContainer()
%       for i, row in enumerate(dimension_to_rows[num_rows]):
        let row${i} = try container.decode(Vector${num_cols}${symbol}.self)
%       end

        self.init(${simd_type_prefix}${num_cols}x${num_rows}(
%       for i, column in enumerate(dimension_to_rows[num_cols]):
%         is_last = i == int(num_cols) - 1
            [${', '.join([f'row{row}.{column}' for row in dimension_to_columns[num_rows]])}]${'' if is_last else ','}
%       end
        ))
    }
}

extension Matrix${num_rows}x${num_cols}${symbol} : ExpressibleByArrayLiteral {
    public init(arrayLiteral elements: Vector${num_cols}${symbol}...) {
        precondition(elements.count == ${num_rows})
        
        self.init(${simd_type_prefix}${num_cols}x${num_rows}(
%       for i, column in enumerate(dimension_to_rows[num_cols]):
%         is_last = i == int(num_cols) - 1
            [${', '.join([f'elements[{row}].{column}' for row in dimension_to_columns[num_rows]])}]${'' if is_last else ','}
%       end
        ))
    }
}

%     end
%   end
% end
%
% for out_rows in dimensions:
%   for out_cols in dimensions:
%     for rows_cols in dimensions:
%       if out_rows != out_cols or out_rows != rows_cols or out_cols != rows_cols:

public func *(lhs: Matrix${out_rows}x${rows_cols}${symbol}, rhs: Matrix${rows_cols}x${out_cols}${symbol}) -> Matrix${out_rows}x${out_cols}${symbol} {
        return Matrix${out_rows}x${out_cols}${symbol}(lhs.matrix * rhs.matrix)
}
%       end
%     end
%   end
% end

#endif
